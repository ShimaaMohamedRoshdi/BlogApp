{
  "version": 3,
  "sources": ["../../../src/utils/siteMetaData.js", "../../../contentlayer.config.js"],
  "sourcesContent": ["// please update required information\nconst siteMetadata = {\n    title: 'Next.js Blog With Tailwind CSS and Contentlayer',\n    author: 'CodeBucks',\n    headerTitle: 'Next.js Blog',\n    description: 'A blog created with Next.js, Tailwind.css and contentlayer.',\n    language: 'en-us',\n    theme: 'system', // system, dark or light\n    siteUrl: 'https://create-blog-with-nextjs.vercel.app', // your website URL\n    siteLogo: '/logo.png',\n    socialBanner: '/social-banner.png', // add social banner in the public folder\n    email: 'shimaamohamedd462@gmail.com', \n    github: 'https://github.com/ShimaaMohamedRoshdi',\n    twitter: 'https://twitter.com/',\n    facebook: 'https://www.facebook.com/profile.php?id=100071288824312',\n    youtube: 'https://youtube.com/codebucks',\n    linkedin: 'https://www.linkedin.com/in/shimaa-mohamed-502aab27bi',\n    dribbble: 'https://www.dribbble.com',\n    locale: 'en-US',\n  }\n  \n  module.exports = siteMetadata", "// // contentlayer.config.js\n\n// import { makeSource, defineDocumentType } from \"@contentlayer/source-files\";\n// import { author, description } from \"./src/utils/siteMetaData\";\n// import readingTime from \"reading-time\";\n// import remarkGfm from \"remark-gfm\";\n// import rehypeSlug from \"rehype-slug\";\n// import rehypeAutolinkHeadings from \"rehype-autolink-headings\";\n// import GithupSluggr from \"github-slugger\";\n\n// const Blog = defineDocumentType(() => ({\n//   name: \"Blog\",\n//   filePathPattern: \"**/**/*.mdx\",\n//   contentType: \"mdx\",\n//   fields: {\n//     title: {\n//       type: \"string\",\n//       required: true,\n//     },\n//     publishAt: {\n//       type: \"date\",\n//       required: true,\n//     },\n//     updatedAt: {\n//       type: \"date\",\n//       required: true,\n//     },\n//     description: {\n//       type: \"date\",\n//       required: true,\n//     },\n//     image: { type: string, required: true },\n//     isPublished: {\n//       type: \"boolean\",\n//       default: true,\n//     },\n//     author: {\n//       type: \"string\",\n//       required: true,\n//     },\n//     tags: {\n//       type: \"list\",\n//       of: { type: \"string\" },\n//     },\n//   },\n//   computedFields: {\n//     url: {\n//       type: \"string\",\n//       resolve: (doc) => `/blogs/${doc._raw.flattenedPath}`,\n//     },\n//     readingTime: {\n//       type: \"json\",\n//       resolve: (doc) => readingTime(doc.body.raw),\n//     },\n//     toc: {\n//       type: \"json\",\n//       resolve: async (doc) => {\n//         const regulrExp = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n//         const slugger = new GithupSluggr();\n//         const headings = Array.from(doc.body.raw.matchAll(regulrExp)).map(\n//           ({ groups }) => {\n//             const flag = groups?.flag;\n//             const content = groups?.content;\n\n//             return {\n//               level:\n//                 flag?.length == 1 ? \"one\" : flag?.length == 2 ? \"two\" : \"three\",\n//               text: content,\n//               slug: content ? slugger.slug(content) : undefined,\n//             };\n//           }\n//         );\n//         return headings;\n//       },\n//     },\n//   },\n// }));\n\n// export default makeSource({\n//   contentDirPath: \"content\",\n//   documentTypes: [Blog],\n//   mdx: {\n//     remarkPlugins: [remarkGfm],\n//     rehypePlungins: [\n//       rehypeSlug,\n//       [rehypeAutolinkHeadings, { behavior: \"append\" }],\n//     ],\n//   },\n// });\nimport { makeSource, defineDocumentType } from \"@contentlayer/source-files\";\nimport { author, description } from \"./src/utils/siteMetaData\";\nimport readingTime from \"reading-time\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport GithubSlugger from \"github-slugger\";\n\nconst Blog = defineDocumentType(() => ({\n  name: \"Blog\",\n  filePathPattern: \"**/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    publishAt: { type: \"date\", required: true },\n    updatedAt: { type: \"date\", required: true },\n    description: { type: \"string\", required: true }, // \u2705 Fixed\n    image: { type: \"string\", required: true }, // \u2705 Fixed\n    isPublished: { type: \"boolean\", default: true },\n    author: { type: \"string\", required: true },\n    tags: { type: \"list\", of: { type: \"string\" } },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (doc) => `/blogs/${doc._raw.flattenedPath}`,\n    },\n    readingTime: {\n      type: \"json\",\n      resolve: (doc) => readingTime(doc.body.raw),\n    },\n    toc: {\n      type: \"json\",\n      resolve: async (doc) => {\n        const regulrExp = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n        const slugger = new GithubSlugger(); // \u2705 Fixed import\n        const headings = Array.from(doc.body.raw.matchAll(regulrExp)).map(\n          ({ groups }) => {\n            const flag = groups?.flag;\n            const content = groups?.content;\n\n            return {\n              level: flag?.length == 1 ? \"one\" : flag?.length == 2 ? \"two\" : \"three\",\n              text: content,\n              slug: content ? slugger.slug(content) : undefined,\n            };\n          }\n        );\n        return headings;\n      },\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Blog],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [ // \u2705 Fixed typo\n      rehypeSlug,\n      [rehypeAutolinkHeadings, { behavior: \"append\" }],\n    ],\n  },\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA,QAAM,eAAe;AAAA,MACjB,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,aAAa;AAAA,MACb,UAAU;AAAA,MACV,OAAO;AAAA;AAAA,MACP,SAAS;AAAA;AAAA,MACT,UAAU;AAAA,MACV,cAAc;AAAA;AAAA,MACd,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,UAAU;AAAA,MACV,SAAS;AAAA,MACT,UAAU;AAAA,MACV,UAAU;AAAA,MACV,QAAQ;AAAA,IACV;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACqEnB,0BAAoC;AADpC,SAAS,YAAY,0BAA0B;AAE/C,OAAO,iBAAiB;AACxB,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AACnC,OAAO,mBAAmB;AAE1B,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,WAAW,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAC1C,WAAW,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IAC1C,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA;AAAA,IAC9C,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA;AAAA,IACxC,aAAa,EAAE,MAAM,WAAW,SAAS,KAAK;AAAA,IAC9C,QAAQ,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACzC,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,EAC/C;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,UAAU,IAAI,KAAK,aAAa;AAAA,IACpD;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG;AAAA,IAC5C;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,OAAO,QAAQ;AACtB,cAAM,YAAY;AAClB,cAAM,UAAU,IAAI,cAAc;AAClC,cAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,SAAS,CAAC,EAAE;AAAA,UAC5D,CAAC,EAAE,OAAO,MAAM;AACd,kBAAM,OAAO,QAAQ;AACrB,kBAAM,UAAU,QAAQ;AAExB,mBAAO;AAAA,cACL,OAAO,MAAM,UAAU,IAAI,QAAQ,MAAM,UAAU,IAAI,QAAQ;AAAA,cAC/D,MAAM;AAAA,cACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAI;AAAA,YAC1C;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA;AAAA,MACb;AAAA,MACA,CAAC,wBAAwB,EAAE,UAAU,SAAS,CAAC;AAAA,IACjD;AAAA,EACF;AACF,CAAC;",
  "names": []
}
